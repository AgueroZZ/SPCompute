uniroot
Compute_Power <- function(parameters, n, response = "binary", covariate = "binary", mode = "additive", alpha = 0.05, seed = 123, LargePowerApproxi = F, searchSizeGamma0 = 8, searchSizeBeta0 = 8, B = 10000, method = "semi-sim"){
if(method == "semi-sim"){
Compute_Power_Sim(parameters, n, B = B, response = response, covariate = covariate, mode = mode, alpha = alpha, seed = seed, LargePowerApproxi = LargePowerApproxi, searchSizeGamma0 = searchSizeGamma0, searchSizeBeta0 = searchSizeBeta0)
}
else if (method == "expand"){
Compute_Power_Expanded(parameters, n, response = response, covariate = covariate, mode = mode, alpha = alpha, seed = seed, LargePowerApproxi = LargePowerApproxi, searchSizeGamma0 = searchSizeGamma0, searchSizeBeta0 = searchSizeBeta0)
}
else{
return(message("Error: The selected method is not defined."))
}
}
parameters <- list(TraitMean = 0.3, TraitSD = 1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "expand")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
parameters <- list(TraitMean = 0.3, TraitSD = 1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "expand")
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim")
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = "1234")
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = "12345")
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = "12345", B = 123)
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = "12345", B = 123)
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = "12345", B = 123)
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = "12345", B = 123)
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim1", seed = "12345", B = 123)
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = 1, B = 123)
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = 12, B = 123)
Compute_Power(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = 12, B = 10)
> Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = 12, B = 10)
Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", method = "semi-sim", seed = 12, B = 10)
Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", seed = 12, B = 10)
Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", seed = 12, B = 10)
Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", seed = 12, B = 1)
Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", seed = 12)
Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", seed = 12)
Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", seed = 12,B = 1)
parameters
Compute_Power_Sim(parameters, n = 1000, "continuous", "continuous", seed = 12)
Compute_Power_Sim(parameters, n = 1000, covariate = "continuous", covarite = "continuous", seed = 12)
Compute_Power_Sim(parameters, n = 1000, covariate = "continuous", response = "continuous", seed = 12)
parameters <- list(preva = 0.1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Power(parameters, n = 1000, response ="binary", "continuous", method = "expand")
Compute_Power(parameters, n = 1000, response ="binary", "continuous", method = "sim")
Compute_Power(parameters, n = 1000, response ="binary", "continuous", method = "semi-sim")
Compute_Power(parameters, n = 1000, response ="binary", "continuous", method = "semi-sim", B = 1000)
Compute_Power(parameters, n = 1000, response ="binary", "continuous", method = "semi-sim", B = 10000)
Compute_Power(parameters, n = 1000, response ="binary", "continuous", method = "semi-sim", B = 100000)
Compute_Size_Expanded
Compute_Size_Sim
Compute_Size <- function(parameters, PowerAim, response = "binary", covariate = "binary", mode = "additive", alpha = 0.05, seed = 123, LargePowerApproxi = F, searchSizeGamma0 = 8, searchSizeBeta0 = 8, B = 10000, method = "semi-sim", upper.lim.n = 800000){
if(method == "semi-sim"){
Compute_Size_Sim(parameters, PowerAim, B = B, response = response, covariate = covariate, mode = mode, alpha = alpha, seed = seed, LargePowerApproxi = LargePowerApproxi, searchSizeGamma0 = searchSizeGamma0, searchSizeBeta0 = searchSizeBeta0, upper.lim.n = upper.lim.n)
}
else if (method == "expand"){
Compute_Size_Expanded(parameters, PowerAim, response = response, covariate = covariate, mode = mode, alpha = alpha, seed = seed, LargePowerApproxi = LargePowerApproxi, searchSizeGamma0 = searchSizeGamma0, searchSizeBeta0 = searchSizeBeta0, upper.lim.n = upper.lim.n)
}
else{
return(message("Error: The selected method is not defined."))
}
}
parameters <- list(TraitMean = 0.3, TraitSD = 1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "sim")
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "semi-sim")
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "expand")
parameters <- list(preva = 0.1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Size(parameters, PowerAim = 0.8, response ="binary", "continuous", method = "expand")
Compute_Size(parameters, PowerAim = 0.8, response ="binary", "continuous", method = "semi-sim")
Compute_Size(parameters, PowerAim = 0.8, response ="binary", covariate = "continuous", method = "semi-sim")
forceSymmetric
parameters
Compute_Size_Sim(parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
uniroot
debugSource('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
-searchSizeGamma0
searchSizeGamma0 <- 8
c(-searchSizeGamma0, searchSizeGamma0)
debugSource('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
debugSource('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
parameters
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
dlogis
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous", LargePowerApproxi = T)
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous", LargePowerApproxi = T)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary", covariate = "continuous")
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary1", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary1", covariate = "continuous")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size_Sim(parameters = parameters, PowerAim = 0.8, response ="binary1", covariate = "continuous")
parameters <- list(TraitMean = 0.3, TraitSD = 1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "semi-sim")
parameters <- list(beta0 = 0.3, ResidualSD = 1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "semi-sim")
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "expand")
source('D:/Stats-Gene/Bioinfo_Project/Sample_Size_Rpackage/SPCompute_v2/R/functions.R', echo=TRUE)
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "expand")
parameters <- list(TraitMean = 0.3, TraitSD = 1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "semi-sim")
parameters <- list(beta0 = 0.3, ResidualSD = 1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Size(parameters, PowerAim = 0.8, "continuous", "continuous", method = "expand")
parameters <- list(preva = 0.1, pG = 0.2, betaG = log(1.1), betaE = log(1.1), muE = 0, sigmaE = 3, gammaG = log(2.1))
Compute_Size(parameters, PowerAim = 0.8, response ="binary", "continuous", method = "expand")
Compute_Size(parameters, PowerAim = 0.8, response ="binary", "continuous", method = "semi-sim")
